1.实例方法
    定义：第一个参数必须是实例对象，该参数名一般约定为“self”，通过它来传递实例的属性和方法（也可以传类的属性和方法）；
    调用：只能由实例对象调用。

2.类方法
    定义：使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；
    调用：实例对象和类对象都可以调用。

3.静态方法
    定义：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法；
    调用：实例对象和类对象都可以调用。

--------实例方法--------
一、实例方法

实例方法就是类的实例能够使用的方法。如下：
class Foo:
    def __init__(self, name):
        self.name = name
    def hi(self):
        print self.name

if __name__ == '__main__':
    foo01 = Foo('letian')
    foo01.hi()
    print type(Foo)
    print type(foo01)
    print id(foo01)
    print id(Foo)
运行结果为:
letian
<type 'classobj'>
<type 'instance'>
40124704
31323448[code]
  可以看到，Foo的type为classobj（类对象，python中定义的类本身也是对象），foo01的type为instance（实例）。而hi()是实例方法，所以foo01.hi()会输出'letian'。实例方法的第一个参数默认为self，代指实例。self不是一个关键字，而是约定的写法。init()是生成实例时默认调用的实例方法。将Foo的定义改为以下形式：
class Foo:
    def __init__(this, name):
        this.name = name
    def hi(here):
        print here.name

运行依然正确。 内置函数id用来查看对象的标识符，下面是其doc内容：
>>> print id.__doc__
id(object) -> integer

Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)

-------类方法----------
使用装饰器@classmethod。
  原则上，类方法是将类本身作为对象进行操作的方法。假设有个方法，且这个方法在逻辑上采用类本身作为对象来调用更合理，那么这个方法就可以定义为类方法。另外，如果需要继承，也可以定义为类方法。
如下场景：
假设我有一个学生类和一个班级类，想要实现的功能为：
    执行班级人数增加的操作、获得班级的总人数；
    学生类继承自班级类，每实例化一个学生，班级人数都能增加；
    最后，我想定义一些学生，获得班级中的总人数。
思考：这个问题用类方法做比较合适，为什么？因为我实例化的是学生，但是如果我从学生这一个实例中获得班级总人数，在逻辑上显然是不合理的。同时，如果想要获得班级总人数，如果生成一个班级的实例也是没有必要的。

class ClassTest(object):
    __num = 0

    @classmethod
    def addNum(cls):
        cls.__num += 1

    @classmethod
    def getNum(cls):
        return cls.__num

    # 这里我用到魔术函数__new__，主要是为了在创建实例的时候调用人数累加的函数。
    def __new__(self):
        ClassTest.addNum()
        return super(ClassTest, self).__new__(self)

class Student(ClassTest):
    def __init__(self):
        self.name = ''

a = Student()
b = Student()
print(ClassTest.getNum()) #获得班级总人数，如果生成一个班级的实例也是没有必要的


静态方法
使用装饰器@staticmethod。
静态方法是类中的函数，不需要实例。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作。可以理解为，静态方法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，便于使用和维护。

譬如，我想定义一个关于时间操作的类，其中有一个获取当前时间的函数。

import time

class TimeTest(object):
    def __init__(self, hour, minute, second):
        self.hour = hour
        self.minute = minute
        self.second = second

    @staticmethod # 静态方法中不会涉及到类中的属性和方法
    def showTime():
        return time.strftime("%H:%M:%S", time.localtime())

print(TimeTest.showTime()) # 不需用实例就可以访问
t = TimeTest(2, 10, 10)
nowTime = t.showTime()
print(nowTime)
 
  如上，使用了静态方法（函数），然而方法体中并没使用（也不能使用）类或实例的属性（或方法）。若要获得当前时间的字符串时，并不一定需要实例化对象，此时对于静态方法而言，所在类更像是一种名称空间。
  其实，我们也可以在类外面写一个同样的函数来做这些事，但是这样做就打乱了逻辑关系，也会导致以后代码维护困难。










四、super
super用来执行父类中的函数，例如：
class Foo(object):
    def hi(self):
        print 'hi,Foo'

class Foo2(Foo):
    def hi(self):
        super(Foo2, self).hi()

if __name__ == '__main__':
    foo2 = Foo2()
    foo2.hi()


运行结果：
hi,Foo


注意，Foo类必须继承某个类（并且这个继承链开始于object类），否则会报错。如果改成下面的形式：
class Foo:
    def hi(self):
        print 'hi,Foo'

class Foo2(Foo):
    def hi(self):
        super(Foo2, self).hi()

if __name__ == '__main__':
    foo2 = Foo2()
    foo2.hi()


运行时报错如下：
......
TypeError: must be type, not classobj


关于super，具体请见http://docs.python.org/2/library/functions.html?highlight=super#super以及super.doc。


五、类变量和实例变量

类变量定义在类的定义之后，实例变量则是以为self.开头。例如：
class Foo(object):
    val = 0
    def __init__(self):
        self.val = 1

if __name__ == '__main__':
    foo = Foo()
    print foo.val # 实例变量
    print Foo.val # 类变量
运行结果为：
1
0


实例也能够访问类变量，如下：
class Foo(object):
    val = 0
    def __init__(self): # 构造函数没有初始化val
        pass
if __name__ == '__main__':
    foo = Foo()
    print foo.val
    print Foo.val

运行结果如下：
0
0


另外，可以通过以下方式访问类变量：
class Foo(object):
    val = 3
    def __init__(self):
        print self.__class__.val  # 通过__class__访问类变量
if __name__ == '__main__':
    foo = Foo()

运行结果：
3

还可以这样：
class Foo(object):
    val = 3
    def __init__(self):
        pass
    @classmethod  # 定义类方法访问类变量
    def echo(cls):
        print cls.val
if __name__ == '__main__':
    Foo.echo()

运行结果：
3

六、如何调用父类的构造函数
子类（派生类）并不会自动调用父类（基类）的init方法，例如：
class Foo(object):
    def __init__(self):
        self.val = 1

class Foo2(Foo):
    def __init__(self):
        print self.val

if __name__ == '__main__':
    foo2 = Foo2()
运行时报错。

调用父类的init方法有两种，第一种：
class Foo(object):
    def __init__(self):
        self.val = 1

class Foo2(Foo):
    def __init__(self):
        Foo.__init__(self)   //类调用实例方法时，需要传入self指代的实例
        print self.val

if __name__ == '__main__':
    foo2 = Foo2()


第二种：
class Foo(object):
    def __init__(self):
        self.val = 1

class Foo2(Foo):
    def __init__(self):
        super(Foo2, self).__init__() 
        print self.val

if __name__ == '__main__':
    foo2 = Foo2()
这两种方法的运行结果均为：
1


不过这两种方法是有区别的。















