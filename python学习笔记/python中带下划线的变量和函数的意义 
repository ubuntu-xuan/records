https://www.cnblogs.com/wangshuyi/p/6096362.html


变量：
1.前面带一个_的变量(是否正确？)： 标明是一个私有变量，只用于标明，外部类还是可以访问到这个
2.前面带两个__,后面带两个__的变量：标明是内置变量
3.大写加下划线的变量：标明是不会发生改变的全局变量

函数：
1.前面带一个_: 标明是一个私有函数，只用于标明
2.前面带__,后面带__: 标明是特殊函数


1. 变量
常量：大写加下划线
USER_CONSTANT
对于不会发生改变的全局变量，使用大写加下划线

私有变量：小写和一个前导下划线
_private_value
python中不存在私有变量一说，这只是一个约定

内置变量： 小写，两个前导下划线和两个后置下划线
__class__


2.函数和方法
私有方法：小写和一个前导下划线
def _secrete(self):
    print "don't test me."
这里和私有变量一样，并一是真正的私有访问权限

特殊方法： 小写和两个前导下划线，两个后置下划线
def __add__(self,other):
    return int.__add__(other)
这种风格只应用于特殊函数，比如操作符重载等。


函数参数：小写和下划线，缺省值等号两边无空格
def connect(self,user=None):
    self.__user = user

3.类
类总是用驼峰格式
例如：SQLEngine
      MimeTypes
对于基类，可以使用一个Base或者Abstract前缀
如：BaseCookie AbstractGroup

4.模块和包
除特殊模块__init__之外，模块名称都使用不带下划线的小写字母
若是它们实现一个协议，那么通常使用lib后缀，如：
import smtplib
import os
import sys

5 关于参数

5.1 不要用断言来实现静态类型检测
断言可以用于检查参数，但不应仅仅是进行静态类型检测。 Python 是动态类型语言，静态类型检测违背了其设计思想。断言应该用于避免函数不被毫无意义的调用。

5.2 不要滥用 *args 和 **kwargs
*args 和 **kwargs 参数可能会破坏函数的健壮性。它们使签名变得模糊，而且代码常常开始在不应该的地方构建小的参数解析器。

6 其他

6.1 使用 has 或 is 前缀命名布尔元素
is_connect = True
has_member = False


6.2 用复数形式命名序列
members = ['user_1', 'user_2']


6.3 用显式名称命名字典
person_address = {'user_1':'10 road WD', 'user_2' : '20 street huafu'}


6.4 避免通用名称
诸如 list, dict, sequence 或者 element 这样的名称应该避免。

6.5 避免现有名称
诸如 os, sys 这种系统已经存在的名称应该避免。

7 一些数字
一行列数 : PEP 8 规定为 79 列，这有些苛刻了。根据自己的情况，比如不要超过满屏时编辑器的显示列数。这样就可以在不动水平游标的情况下，方便的查看代码。

一个函数 : 不要超过 30 行代码, 即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。
一个类 : 不要超过 200 行代码，不要有超过 10 个方法。
一个模块 不要超过 500 行。


8 验证脚本

可以安装一个 pep8 脚本用于验证你的代码风格是否符合 PEP8。

>>easy_install pep8

>>pep8 -r --ignoire E501 Test.py

这个命令行的意思是，重复打出错误，并且忽略 501 错误(代码超过 79 行)。











