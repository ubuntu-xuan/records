预测准确度

1.3.1 推荐系统实验方法
1.离线实验
  (1)通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集;
  (2)将数据集按照一定的规则分在训练集和测试集;
  (3)在训练集上训练用户兴趣模型，在测试集时行预测;
  (4)通过事先定义的离线指标评测算法在测试集上的预测结果。



2.用户调查
3.在线实验
  在完成离线实验和必要的用户调查后，可以将推荐系统上线做AB测试，将它和旧的算法进行比较。

1.3.2 评测指标
1.用户满意度
2.预测准确度
  评分预测
  TopN推荐
    网站在提供推荐服务时，一般是给用户一个个性化的推荐列表，这种推荐叫做TopN推荐。TopN推荐的预测准确率一般通过准确率(precision)/召回率(recall)度量。
3.覆盖率
  覆盖率有不同的定义方法,最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例。
  信息熵
  基尼系数

4.多样性
  多样性描述了推荐列表中物品两两之间的不相似性。
5. 新颖性
6. 惊喜度
7. 信任度
8. 实时性
9. 健壮性
10. 商业目标

1.3.3 评测维度






2.4.1 基于用户的协同过滤算法 UserCF
基于用户的协同过滤算法主要包括两个步骤。
(1) 找到和目标用户兴趣相似的用户集合。
(2) 找到这个集合中的用户喜欢的,且目标用户没有听说过的物品推荐给目标用户。


2.4.2 基于物品的协同过滤算法 ItemCF （对结果的解释性强）
    基于物品的协同过滤算法给用户推荐那些和他们之前喜欢的物品相似的物品。
    ItemCF并不利用物品的内容属性计算物品之间的相似度，它主要通过分析用户的行为记录计算
物品之间的相似度。该算法认为，物品A与物品B具有很大相似度是因为喜欢物品A的用户大都也喜欢物品B。
    基于物品的协同过滤算法可以利用用户的历史行为给推荐结果提供推荐解释,比如给用户推
荐《天龙八部》的解释可以是因为用户之前喜欢《射雕英雄传》。如 2-10 所示, Hulu 在个性化视
频推荐利用 ItemCF 给每个推荐结果提供了一个推荐解释,而用于解释的视频都是用户之前观看或
者收藏过的视频。
    基于物品的协同过滤算法主要分为两步。
(1) 计算物品之间的相似度。
(2) 根据物品的相似度和用户的历史行为给用户生成推荐列表。


2.4.3 UserCF和ItemCF的综合比较（在不同的场景选用不同的CF）
    换句话说, UserCF 的推荐更社会化,反映了用户所在的小型兴趣群体中物品的热门程度,而 ItemCF 的推荐更加个性化,反映了用户自己的兴趣传承。
    在新闻网站中,用户的兴趣不是特别细化,绝大多数用户都喜欢看热门的新闻。即使是个性
化,也是比较粗粒度的,比如有些用户喜欢体育新闻,有些喜欢社会新闻,而特别细粒度的个性
化一般是不存在的。比方说,很少有用户只看某个话题的新闻,主要是因为这个话题不可能保证
每天都有新的消息,而这个用户却是每天都要看新闻的。因此,个性化新闻推荐更加强调抓住
新闻热点,热门程度和时效性是个性化新闻推荐的重点,而个性化相对于这两点略显次要。因
此, UserCF 可以给用户推荐和他有相似爱好的一群其他用户今天都在看的新闻,这样在抓住热
点和时效性的同时,保证了一定程度的个性化。这是 Digg 在新闻推荐中使用 UserCF 的最重要
原因。
    UserCF 适合用于新闻推荐的另一个原因是从技术角度考量的。因为作为一种物品,新闻的更
新非常快,每时每刻都有新内容出现,而 ItemCF 需要维护一张物品相关度的表,如果物品更新很
快,那么这张表也需要很快更新,这在技术上很难实现。绝大多数物品相关度表都只能做到一天
一次更新,这在新闻领域是不可以接受的。而 UserCF 只需要用户相似性表,虽然 UserCF 对于新
用户也需要更新相似度表,但在新闻网站中,物品的更新速度远远快于新用户的加入速度,而且
对于新用户,完全可以给他推荐最热门的新闻,因此 UserCF 显然是利大于弊。
但是,在图书、电子商务和电影网站,比如亚马逊、豆瓣、 Netflix 中, ItemCF 则能极大地发
挥优势。首先,在这些网站中,用户的兴趣是比较固定和持久的。一个技术人员可能都是在购买
技术方面的书,而且他们对书的热门程度并不是那么敏感,事实上越是资深的技术人员,他们看
的书就越可能不热门。此外,这些系统中的用户大都不太需要流行度来辅助他们判断一个物品的
好坏,而是可以通过自己熟悉领域的知识自己判断物品的质量。因此,这些网站中个性化推荐的
任务是帮助用户发现和他研究领域相关的物品。因此, ItemCF 算法成为了这些网站的首选算法。
此外,这些网站的物品更新速度不会特别快,一天一次更新物品相似度矩阵对它们来说不会造成
太大的损失,是可以接受的。

2.5 隐语义模型
    推荐系统的用户行为分为显性反馈和隐性反馈。 LFM 在显性反馈数据(也就是评分数据)上
解决评分预测问题并达到了很好的精度。不过本章主要讨论的是隐性反馈数据集,这种数据集的
特点是只有正样本(用户喜欢什么物品),而没有负样本(用户对什么物品不感兴趣)。那么,在隐性反馈
数据集上应用LFM解决TopN推荐的第一个关键问题就是如何给每个用户生成负样本。
对负样本采样时应该
遵循以下原则。
  1.对每个用户,要保证正负样本的平衡(数目相似)
  2.对每个用户采样负样本时,要选取那些很热门,而用户却没有行为的物品。
一般认为,很热门而用户却没有行为更加代表用户对这个物品不感兴趣。因为对于冷门的物品,用户可能是压根没在网站中发现这个物品,所以谈不上是否感兴趣。




第3章.推荐系统冷启动问题

3.1
冷启动问题简介
冷启动问题(cold start)主要分3类。
  1.用户冷启动 用户冷启动主要解决如何给新用户做个性化推荐的问题。当新用户到来时,
我们没有他的行为数据,所以也无法根据他的历史行为预测其兴趣,从而无法借此给他
做个性化推荐。
  2.物品冷启动 物品冷启动主要解决如何将新的物品推荐给可能对它感兴趣的用户这一问题。
  3.系统冷启动 系统冷启动主要解决如何在一个新开发的网站上(还没有用户,也没有用
户行为,只有一些物品的信息)设计个性化推荐系统,从而在网站刚发布时就让用户体
验到个性化推荐服务这一问题。
对于这3种不同的冷启动问题,有不同的解决方案。一般来说,可以参考如下解决方案。
   1.提供非个性化的推荐 
     非个性化推荐的最简单例子就是热门排行榜,我们可以给用户推
荐热门排行榜,然后等到用户数据收集到一定的时候,再切换为个性化推荐。
   2.利用用户注册时提供的年龄、性别等数据做粗粒度的个性化。
   3.利用用户的社交网络账号登录(需要用户授权),导入用户在社交网站上的好友信息,然
后给用户推荐其好友喜欢的物品。
   4.要求用户在登录时对一些物品进行反馈,收集用户对这些物品的兴趣信息,然后给用户
推荐那些和这些物品相似的物品。
   5.对于新加入的物品,可以利用内容信息,将它们推荐给喜欢过和它们相似的物品的用户。
   6.在系统冷启动时,可以引入专家的知识,通过一定的高效方式迅速建立起物品的相关度表。

3.2 利用用户注册信息
用户的注册信息分3种。
 人口统计学信息 包括用户的年龄、性别、职业、民族、学历和居住地。
 用户兴趣的描述 有一些网站会让用户用文字描述他们的兴趣。
 从其他网站导入的用户站外行为数据 比如用户通过豆瓣、新浪微博的账号登录,就可以
在得到用户同意的情况下获取用户在豆瓣或者新浪微博的一些行为数据和社交网络数据。
  基于注册信息的个性化推荐流程基本如下:
    (1) 获取用户的注册信息;
    (2) 根据用户的注册信息对用户分类;
    (3) 给用户推荐他所属分类中用户喜欢的物品。
3.3 选择合适的物品启动用户的兴趣

3.4 利用物品的内容信息
  对于 ItemCF 算法来说,物品冷启动就是一个严重的问题了。因为 ItemCF 算法的原理是给用户
推荐和他之前喜欢的物品相似的物品。 
  ItemCF 算法会每隔一段时间利用用户行为计算物品相似度
表(一般一天计算一次),在线服务时 ItemCF 算法会将之前计算好的物品相关度矩阵放在内存中。
因此,当新物品加入时,内存中的物品相关表中不会存在这个物品,从而 ItemCF 算法无法推荐新
的物品。解决这一问题的办法是频繁更新物品相似度表,但基于用户行为计算物品相似度是非常
耗时的事情,主要原因是用户行为日志非常庞大。而且,新物品如果不展示给用户,用户就无法
对它产生行为,通过行为日志计算是计算不出包含新物品的相关矩阵的。为此,我们只能利用物
品的内容信息计算物品相关表,并且频繁地更新相关表(比如半小时计算一次)。
3.5 发挥专家的作用

第4章 利用用户标签数据
  根据给物品打标签的人的不同,标签应用一般分为两种:一种是让作者或者专
家给物品打标签;另一种是让普通用户给物品打标签,也就是UGC(User Generated Content,用
户生成的内容)的标签应用。UGC的标签系统是一种表示用户兴趣和物品语义的重要方式。当一
个用户对一个物品打上一个标签,这个标签一方面描述了用户的兴趣,另一方面则表示了物品的
语义,从而将用户和物品联系了起来。因此本章主要讨论UGC的标签应用,研究用户给物品打标
签的行为,探讨如何通过分析这种行为给用户进行个性化推荐。



第5章 利用上下文信息
  这些上下文包括用户访问推荐系统的时间、地点、心情等,对于提高推荐系统的推荐系统是非常重要的。比
如,一个卖衣服的推荐系统在冬天和夏天应该给用户推荐不同种类的服装。推荐系统不能因为用户在夏天喜欢过某件T恤,就在冬天也给该用户推荐类似的T恤。再举个例子,当用户在中关村打开一个美食推荐系统时,如果这个推荐系统推荐的餐馆都是中关村附近的,显然推荐结果更加
能够令用户满意。上下文影响用户兴趣的例子还有很多,比如用户上班时和下班后的兴趣会有区别,用户在平时和周末的兴趣会有区别,用户和父母在一起与和同学在一起时的兴趣有区别,甚至用户在上厕所时阅读的文章和在办公桌旁阅读的文章也是不同的。因此,准确了解用户的上下
文信息,并将该信息应用于推荐算法是设计好的推荐系统的关键步骤。
  5.1 时间上下文信息
    5.1.1 时间效应简介
      用户兴趣是变化的
      物品也是有生命周期的
      季节效应
  5.2 地点上下文信息

第6章 利用社交网络数据
  6.1 获取社交网络数据的途径
    6.1.1 电子邮件
      我们获得了用户的邮箱,也可以通过邮箱后缀得到一定的社交关系信息。一般来
说,邮箱名是name@xxx.xxx的格式。如果用户用的是公司邮箱,那么我们可以根据后缀知道哪
些用户是同一家公司的。
    6.1.2 用户注册信息
      有些网站需要用户在注册时填写一些诸如公司、学校等信息(如图6-2所示)。有了这些信息
后,我们就可以知道哪些用户曾经在同一家公司工作过,哪些用户曾经在同一个学校学习过。这
也是一种隐性的社交网络数据。
    6.1.3 用户的位置数据
    6.1.4 论坛和讨论组
    6.1.6 社交网站
      1. 社会图谱和兴趣图谱
        Facebook和Twitter作为社交网站中的两个代表,它们其实代表了不同的社交网络结构。在
Facebook里,人们的好友一般都是自己在现实社会中认识的人 1 ,比如亲戚、同学、同事等,而
且Facebook中的好友关系是需要双方确认的。在Twitter里,人们的好友往往都是现实中自己不
认识的,而只是出于对对方言论的兴趣而建立好友关系,好友关系也是单向的关注关系。以
Facebook为代表的社交网络称为社交图谱(social graph),而以Twitter为代表的社交网络称为兴
趣图谱(interest graph)。     
   6.3 基于社交网络的推荐  



